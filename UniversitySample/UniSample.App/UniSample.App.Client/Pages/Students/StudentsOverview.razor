@page "/students/overview"
@attribute [Authorize(Roles="Administrator")]
@using Microsoft.AspNetCore.Authorization
@using UniSample.App.Services
@using UniSample.Students.Domain.Dto
@inject StudentsClient _studentClient
@inject IDialogService _dialogService

<PageTitle>UniSample - Studierendenverzeichnis</PageTitle>

<h1>Studierendenverzeichnis</h1>

@if (_loading == true)
{
    <MudProgressCircular Color="Color.Primary" Style="height:70px;width:70px;" Indeterminate="true" />
}
else
{
@if (Elements.Count > 0)
{
    <MudDataGrid T="StudentDto" MultiSelection="false" Items="@Elements" Sortable="true" Filterable="true" QuickFilter="@_quickFilter"
                 Hideable="true">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Studierende</MudText>
            <MudSpacer/>
            <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                          AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <Columns>
            <Column T="StudentDto" Field="@nameof(StudentDto.Id)" Title="Id" Sortable="false" Filterable="false"/>
            <Column T="StudentDto" Field="@nameof(StudentDto.Firstname)" Title="Vorname"/>
            <Column T="StudentDto" Field="@nameof(StudentDto.Lastname)" Title="Nachname"/>
            <Column T="StudentDto" Field="@nameof(StudentDto.Email)"/>
            <Column T="StudentDto" Field="@nameof(StudentDto.Number)" Title="Matrikelnummer"/>
        </Columns>
        <PagerContent>
            <MudDataGridPager T="StudentDto"/>
        </PagerContent>
    </MudDataGrid>
}
else
{
    <p>Es sind noch keine Studierenden vorhanden</p>
}
}

@code {

    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; }

    private ICollection<StudentDto> Elements = new List<StudentDto>();
    private string _searchString;
    private bool _loading = true;

    private List<string> _events = new();

    // quick filter - filter gobally across multiple columns with the same input
    private Func<StudentDto, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.Firstname.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.Lastname.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.Email.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.Number.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    };

    protected override async Task OnInitializedAsync()
    {
        Elements = await _studentClient.GetStudentsAsync();
        _loading = false;
    }

}